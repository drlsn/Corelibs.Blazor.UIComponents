@using Corelibs.Basic.Collections;

@inherits UIComponent

<div class="vlist-card">

    <div class="list-title-panel">
        <div class="list-title-texts">
            @if (Title.IsOk())
            {
                @if (!TitleEdit)
                {
                    <h4 class="list-title">@Title</h4>
                }
                else
                {
                    <EditableText Text=@Title class="no-select" @ref=_editableText
                        Mode=EditableText.ModeType.EditOnClick
                        FontSize=@("15px")
                        FontWeight=@("1000")
                        PaddingLeft=10
                        PaddingRight=10
                        OnSubmit=@OnTitleEditInternal
                        OnDiscard=@OnDiscardEdit />
                }
            }
            @if (Description.IsOk())
            {
                <div class="description">
                    @if (!DescriptionEdit)
                    {
                        <span class="list-description">@Description</span>
                    }
                    else
                    {
                        <EditableText Text=@Description class="no-select" @ref=_editableText
                            Mode=EditableText.ModeType.EditOnClick
                            FontSize=@("13px")
                            PaddingLeft=10
                            PaddingRight=10
                            OnSubmit=@OnDescriptionEditInternal
                            OnDiscard=@OnDiscardEdit />
                    }
                </div>
            }
        </div>
        @if (DropdownModel is not null)
        {
            <Dropdown Model=@DropdownModel OnOptionSelected=OnMenuOptionSelectedInternal>
                <TriggerComponent>
                    <BurgerButton />
                </TriggerComponent>
            </Dropdown>
        }
    </div>
    <div class="items">
        @if (_isAdd)
        {
            <EditableText Text="Name.." class="no-select" @ref=_editableText
                FontSize=@("0.83em")
                PaddingLeft=10
                PaddingRight=10
                OnSubmit=@OnAddItemOnTopInternal
                OnDiscard=@OnDiscardEdit />
        }

        @if (!ListItems.IsNullOrEmpty())
        {
            @for (int i = 0; i < ListItems.Count; i++)
            {
                var child = ListItems[i];
                <Item Id=@child.Id Title=@child.Name DropdownModel=@ItemsDropdownModel OnItemClick=OnItemClickInternal />
            }
        }

    </div>

</div>

@code {
    public delegate Task<bool> NameDelegate(string name);

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public string Title { get; set; }
    [Parameter] public bool TitleEdit { get; set; }
    [Parameter] public NameDelegate OnTitleEdit { get; set; }

    [Parameter] public string Description { get; set; }
    [Parameter] public bool DescriptionEdit { get; set; }
    [Parameter] public NameDelegate OnDescriptionEdit { get; set; }

    [Parameter] public NameDelegate OnAddItemOnTop { get; set; }
    [Parameter] public Dropdown.OnOptionSelectedDelegate OnMenuOptionSelected { get; set; }
    [Parameter] public Item.OnItemClickDelegate? OnItemClick { get; set; }

    [Parameter] public Dropdown.ViewModel DropdownModel { get; set; } = _defaultDropdownModel;
    [Parameter] public Dropdown.ViewModel ItemsDropdownModel { get; set; }

    [Parameter] public List<Dropdown.Option> AdditionalDropdownOptions { get; set; }
    [Parameter] public List<ListItem> ListItems { get; set; } = new();

    private EditableText _editableText;

    protected override async Task OnInitializedAsync()
    {
        if (!AdditionalDropdownOptions.IsNullOrEmpty())
            DropdownModel.Options.AddRange(AdditionalDropdownOptions);
    }

    private bool _isAdd;
    private async Task<bool> OnMenuOptionSelectedInternal(Dropdown.Option option)
    {
        if (option.Id is "add")
        {
            _isAdd = true;
            await InvokeAsync(StateHasChanged);
        }

        return true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            return;

        if (_isAdd)
            await _editableText.SetIsEdit(true);
    }

    protected async Task<bool> OnTitleEditInternal(string name)
    {
        if (!await InvokeBool(OnTitleEdit, name)())
        {
            await InvokeAsync(StateHasChanged);
            return false;
        }

        //await InvokeAsync(StateHasChanged);

        return true;
    }

    protected async Task<bool> OnDescriptionEditInternal(string name)
    {
        if (!await InvokeBool(OnDescriptionEdit, name)())
        {
            await InvokeAsync(StateHasChanged);
            return false;
        }

        //await InvokeAsync(StateHasChanged);

        return true;
    }

    protected async Task<bool> OnAddItemOnTopInternal(string name)
    {
        _isAdd = false;
        if (!await InvokeBool(OnAddItemOnTop, name)())
        {
            await InvokeAsync(StateHasChanged);
            return false;
        }

        ListItems.Insert(0, new("", name));
        //await InvokeAsync(StateHasChanged);

        return true;
    }

    protected Task OnDiscardEdit(string name)
    {
        _isAdd = false;

        return InvokeAsync(StateHasChanged);
    }

    private Task OnItemClickInternal(string id)
    {
        OnItemClick?.Invoke(id);
        return Task.CompletedTask;
    }

    private static readonly Dropdown.ViewModel _defaultDropdownModel = new(
        Options: new()
        {
            new("add", "Add"),
        },
        Trigger: new(IsFixed: true, Value: "Menu", Mode: Dropdown.Mode.Component)
    );

    public record ListItem(string Id, string Name);
}
