@inherits UIComponent

<nav class="sidemenu">
    <div class="menu-button menu-button-x @_sidemenuContentAlwaysOffCssClass" @onclick=@OnMenuButtonClick>
        <img class="menu-button-icon" src=@MenuIconUrl/>
    </div>
    <div class="sidemenu-content @_sidemenuContentAlwaysOffCssClass @_sidemenuContentAlwaysOnCssClass @_menuButtonAlwaysOnCssClass">
        <div class="sidemenu-logo-panel">
            <div class="sidemenu-logo-panel-bg"></div>
            <img class="logo-image" src=@LogoImageUrl />
            <span class="sidemenu-logo-name">@LogoName</span>
        </div>
        <div class="sidemenu-list">
            @{
                <div class="sidemenu-first">
                     @{ DisplayButtonGroup(Model.MainButtonGroups); }

                    <div class="small-screen-button-groups">
                        @{ DisplayButtonGroup(Model.OnlySmallScreenButtonGroups); }
                    </div>

                </div>
                
                <div class="bottom-button-groups">
                     @{ DisplayButtonGroup(Model.BottomButtonGroups); }
                </div>

                void DisplayButtonGroup(IEnumerable<ButtonGroup> groups)
                {
                    if (groups is null)
                        return;

                    @foreach (var group in groups)
                    {
                        <div class="button-group-container">
                            <span class="button-group-name">@group.Name</span>
                            <div class="button-group">
                                @foreach (var button in group.Buttons)
                                {
                                    <div class="button-row" @onclick=@InvokeVoid(OnButtonClick, button.Id)>
                                        @if (button.IconUrl.IsOk())
                                        {
                                            <img class="button-icon" src=@button.IconUrl />
                                        }
                                        @if (button.Name.IsOk())
                                        {
                                            <span class="button-name">@button.Name</span>
                                        }
                                        else if (button.Component is not null)
                                        {
                                            <div class="button-content">@button.Component</div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
            }
        </div>
    </div>
</nav>

@code {
    public delegate Task OnButtonClickDelegate(string id);
    public delegate void OnSizeChangedDelegate(int size);

    [Parameter] public string LogoImageUrl { get; set; }
    [Parameter] public string LogoName { get; set; }
    [Parameter] public ViewModel Model { get; set; }
    [Parameter] public string MenuIconUrl { get; set; }
    [Parameter] public OnButtonClickDelegate OnButtonClick { get; set; }
    [Parameter] public OnSizeChangedDelegate OnSizeChanged { get; set; }

    private string _sidemenuContentAlwaysOnCssClass => IsMenuAlwaysActive ? "always-on" : "";
    private string _menuButtonAlwaysOnCssClass => Model.MainButtonGroups is not null && Model.MainButtonGroups.Length > 0 ? "on" : "";
    private string _sidemenuContentAlwaysOffCssClass => Model.MainButtonGroups is null || Model.MainButtonGroups.Length == 0 ? "off" : "";

    protected override void OnInitialized()
    {
        if (Model is null)
            return;
    }

    public record ButtonGroup(string Name, Button[] Buttons);
    public record Button(string Id, string Name = null, string IconUrl = null, RenderFragment Component = null);

    public bool IsMenuAlwaysActive { get; private set; }
    private void OnMenuButtonClick()
    {
        IsMenuAlwaysActive = !IsMenuAlwaysActive;

        int size = IsMenuAlwaysActive ? 225 : 0;
        OnSizeChanged?.Invoke(size);

        InvokeAsync(StateHasChanged);
    }

    public record ViewModel(
        ButtonGroup[] MainButtonGroups, 
        ButtonGroup[] OnlySmallScreenButtonGroups,
        ButtonGroup[] BottomButtonGroups);
}
