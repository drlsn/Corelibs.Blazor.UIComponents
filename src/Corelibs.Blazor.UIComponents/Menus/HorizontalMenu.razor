@inherits UIComponent

@if (ButtonGroups is null) { return; }

<nav class="horizontal-menu">
    <div class="horizontal-menu-content">
        <div class="search-panel"></div>
        <div class="horizontal-menu-list">
            @foreach (var group in ButtonGroups)
            {
                <div class="button-group">
                    @foreach (var button in group.Buttons)
                    {
                        @if (button.Component is not null)
                        {
                            @button.Component
                        }
                        else
                        @if (button.Name.IsOk())
                        {
                            <button class="button" @onclick=@(() => OnButtonClickInternal(button))>
                                @button.Name
                            </button>

                        }
                        else 
                        if (button.IconUrl.IsOk())
                        {
                            <button class="button" @onclick=@(() => OnButtonClickInternal(button))>
                                <img class="button-icon" src=@button.IconUrl />
                            </button>
                        }
                    }
                </div>
            }
        </div>
    </div>
</nav>

@code {
    public delegate Task OnButtonClickDelegate(string id);

    [Parameter] public ButtonGroup[] ButtonGroups { get; set; }
    [Parameter] public OnButtonClickDelegate OnButtonClick { get; set; }

    private string _sidemenuContentAlwaysOnCssClass => IsMenuAlwaysActive ? "always-on" : "";

    public record ButtonGroup(Button[] Buttons);
    public record Button(string Id = null, string Name = null, string IconUrl = null, RenderFragment Component = null);

    public enum ButtonMode
    {
        Default,
        TextAndIcon,
    }

    private async Task OnButtonClickInternal(Button button)
    {
        if (!button.Id.IsOk() &&
            !button.Name.IsOk() &&
            !button.IconUrl.IsOk() &&
            button.Component is null)
        {
            return;
        }

        await InvokeVoid(OnButtonClick, button.Id)();
    }

    public bool IsMenuAlwaysActive { get; private set; }
    private void OnMenuButtonClick()
    {
        IsMenuAlwaysActive = !IsMenuAlwaysActive;

        int size = IsMenuAlwaysActive ? 225 : 0;

        InvokeAsync(StateHasChanged);
    }
}
